# SPDX-License-Identifier: BSD-2-Clause
# Cargo.toml for libcoap-sys
# This file is part of the libcoap-sys crate, see the README and LICENSE files for
# more information and terms of use.
# Copyright Â© 2021-2024 The NAMIB Project Developers, all rights reserved.

[package]
name = "libcoap-sys"
description = "Raw bindings to the libcoap CoAP library."
version = "0.2.2+libcoap-4.3.1"
edition = "2021"
license = "BSD-2-Clause AND BSD-1-Clause"
links = "coap-3"
readme = "README.md"
repository = "https://github.com/namib-project/libcoap-rs"
authors = ["Hugo Hakim Damer <hdamer@uni-bremen.de>"]
categories = ["external-ffi-bindings", "network-programming", "embedded"]
keywords = ["coap", "libcoap"]
exclude = ["src/libcoap/ext/"]
resolver = "2"
build = "build/main.rs"
# Current reason for MSRV (please update when increasing MSRV): Transient dependency "home" requires Rust 1.81.
rust-version = "1.81.0"

[features]
# The default features match those of libcoaps configure script, except for dtls, which is disabled here because it
# requires a backend to be set manually.
default = ["oscore", "ipv4", "ipv6", "af-unix", "tcp", "websockets", "async", "observe-persist", "q-block", "thread-safe", "thread-recursive-lock-detection", "server", "client", "epoll", "vendored", "static"]
# While not specified here due to limitations in Cargo's syntax, the DTLS feature depends on one of the DTLS backends
# being enabled.
# If you are developing a library based on libcoap-sys and do not care about the DTLS backend, enable the dtls feature
# and let the user decide on the backend to use, either by re-exporting these features (see
# https://doc.rust-lang.org/cargo/reference/features.html#dependency-features) or by assuming that the user will use
# libcoap-sys as a dependency and enable the corresponding backend feature themselves, relying on Cargo's feature
# unification to enable it for your crate as well.
# Also note that the backends are **mutually exclusive** due to the C library having these backends as mutually
# exclusive features. If multiple backends are enabled (e.g. because multiple dependencies use libcoap-sys and use
# different backends), we select one based on the auto-detection order specified in
# https://github.com/obgm/libcoap/blob/develop/configure.ac#L494 (gnutls > openssl > mbedtls > tinydtls).


# Corresponding libcoap configure flag: --with-openssl
dtls_backend_openssl = ["dtls", "dep:openssl-sys"]
dtls_backend_openssl_vendored = ["dtls_backend_openssl", "openssl-sys/vendored"]
# Corresponding libcoap configure flag: --with-gnutls
dtls_backend_gnutls = ["dtls"]
# Corresponding libcoap configure flag: --with-mbedtls
dtls_backend_mbedtls = ["dtls"] # can't use mbedtls-sys-auto to generate linker flags here, as the crate doesn't support mbedtls >= 3.0.0
dtls_backend_mbedtls_vendored = ["dep:mbedtls-sys-auto", "dtls_backend_mbedtls"]
# Corresponding libcoap configure flags: --with-tinydtls --without-submodule-tinydtls
dtls_backend_tinydtls = ["dtls", "dep:tinydtls-sys", "tinydtls-sys/ecc", "tinydtls-sys/psk"]
dtls_backend_tinydtls_vendored = ["dtls_backend_tinydtls", "tinydtls-sys/vendored"]
# Enabling this feature will force libcoap-sys to be built with and statically linked to a vendored version of libcoap,
# which will be built by the build-script before building libcoap-sys.
# This way, it is no longer required to have libcoap installed to use this crate.
vendored = ["static"]
# Enable this feature to use static linking to libcoap instead of dynamic linking.
static = []
# --- FEATURE FLAGS ---
# Note that setting the feature flags currently has no effect on the generated Rust code, because the libcoap headers do
# not use these feature flags. They only affect the features built into the vendored C library (if enabled).

# Enable this feature to enable/require CoAP over DTLS support in the C library.
# Important: also read the section on DTLS backends before enabling this feature.
# Corresponding libcoap configure flag: --enable-dtls
dtls = []
# Enable this feature to enable/require TLS support in addition to DTLS support.
# Note: Will also enable the TCP and DTLS features, so consider the above section regarding DTLS backends before +
# enabling this.
tls = ["dtls", "tcp"]
# Enable this feature to enable/require OSCORE functionality in the C library.
# Corresponding libcoap configure flag: --enable-oscore
oscore = []
# Enable this feature to enable/require IPv4 support in the C library.
# Corresponding libcoap configure flag: --enable-ipv4-support
ipv4 = []
# Enable this feature to enable/require IPv6 support in the C library.
# Corresponding libcoap configure flag: --enable-ipv6-support
ipv6 = []
# Enable this feature to enable/require support for Unix sockets in the C library.
# Corresponding libcoap configure flag: --enable-af-unix-support
af-unix = []
# Enable this feature to enable/require support for CoAP over TCP in the C library.
# Corresponding libcoap configure flag: --enable-tcp
tcp = []
# Enable this feature to enable/require CoAP over WebSockets in the C library.
# Corresponding libcoap configure flag: --enable-websockets
websockets = []
# Enable this feature to enable/require async functionality in the C library.
# Note that this does not generate async-functions as they are used in Rust, it allows for CoAP separate responses as
# specified in RFC 7252, Section 5.2.2.
# Corresponding libcoap configure flag: --enable-async
async = []
# Enable this feature to enable/require support for persisting observes over a server restart in the C library.
# Corresponding libcoap configure flag: --enable-observe-persist
observe-persist = []
# Enable this feature to enable/require Q-Block support in the C library.
# Corresponding libcoap configure flag: --enable-q-block
q-block = []
# Enable this feature to enable/require the thread-safety facilities in the C library to be enabled.
# Corresponding libcoap configure flag: --enable-thread-safe
thread-safe = []
# Enable this feature to enable/require recursive lock detection in the C library.
# Will also implicitly enable the `thread-safe` feature.
# Corresponding libcoap configure flag: --enable-thread-recursive-lock-detection
thread-recursive-lock-detection = ["thread-safe"]
# Enable this feature to set/require the small stack flag in the C library.
# Corresponding libcoap configure flag: --enable-small-stack
small-stack = []
# Enable this feature to enable/require server functionality in the C library.
# Corresponding libcoap configure flag: --enable-server-mode
server = []
# Enable this feature to enable/require client functionality in the C library.
# Corresponding libcoap configure flag: --enable-client-mode
client = []
# Enable this feature to enable/require epoll usage in the C library.
# Corresponding libcoap configure flag: --with-epoll
epoll = []
# Enable this feature to require support for CoAP over WebSockets using TLS in the C library.
# Whether this feature is supported by the C library depends on the used DTLS library.
secure-websockets = ["tls", "websockets"]
# Enable this feature to require support for CIDs in DTLS in the C library.
# Whether this feature is supported by the C library depends on the used DTLS library.
dtls-cid = ["dtls"]
# Enabling this feature to require support for DTLS-PSK in the C library.
# Whether this feature is supported by the C library depends on the used DTLS library.
dtls-psk = ["dtls"]
# Enabling this feature to require support for DTLS-PKI in the C library.
# Whether this feature is supported by the C library depends on the used DTLS library.
dtls-pki = ["dtls"]
# Enabling this feature to require support for DTLS-PKCS11 in the C library.
# Whether this feature is supported by the C library depends on the used DTLS library.
dtls-pkcs11 = ["dtls"]
# Enabling this feature to require support for DTLS-RPK in the C library.
# Whether this feature is supported by the C library depends on the used DTLS library.
dtls-rpk = ["dtls"]

[dependencies]
openssl-sys = { version = "^0.9.74", optional = true }
mbedtls-sys-auto = { version = "^2.26", optional = true }
libc = "^0.2.126"
tinydtls-sys = { version = "^0.2.0", default-features = false, optional = true }

[target.'cfg(target_os="espidf")'.dependencies]
esp-idf-sys = { version = "0.35.0" }

[build-dependencies]
bindgen = "0.69.4"
autotools = "^0.2.3"
fs_extra = "^1.2"
pkg-config = "^0.3.24"
regex = "1.10.5"
embuild = { version = "0.32.0", features = ["bindgen", "espidf", "cmake"] }
version-compare = "0.2.0"

[package.metadata.docs.rs]
features = ["dtls", "dtls_backend_openssl", "vendored"]

[[package.metadata.esp-idf-sys.extra_components]]
remote_component = { name = "espressif/coap", version = "4.3.4~3" }
bindings_header = "src/wrapper.h"
